import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.dataformat.xml.XmlMapper;
import java.io.File;
import java.util.*;

public class XmlParser {
    public static void main(String[] args) {
        try {
            XmlMapper xmlMapper = new XmlMapper();
            
            // Read XML as JsonNode
            JsonNode rootNode = xmlMapper.readTree(new File("input.xml"));
            
            // Navigate to Loop-2300
            JsonNode loop2300Node = rootNode.at("/Loop-C/Loop-2300");
            
            // Map to store path:segment:element -> value
            Map<String, String> extractedData = new HashMap<>();
            
            // Iterate over all Loop-2400 nodes
            for (JsonNode loop2400Node : loop2300Node.findValues("Loop-2400")) {
                parseNode(loop2400Node, "Loop-2400", extractedData);
            }
            
            // Print extracted data
            System.out.println("Extracted Data from Loop-2400 and nested nodes:");
            extractedData.forEach((key, value) -> 
                System.out.println(key + " -> " + value));
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private static void parseNode(JsonNode node, String currentPath, Map<String, String> extractedData) {
        if (node == null || node.isMissingNode()) {
            return;
        }

        if (node.isObject()) {
            node.fields().forEachRemaining(entry -> {
                String key = entry.getKey();
                JsonNode value = entry.getValue();
                String newPath = currentPath + ":" + key;
                
                if (key.startsWith("segment-")) {
                    // Handle segment nodes
                    parseSegment(value, newPath, extractedData);
                } else if (key.startsWith("Composite-")) {
                    // Handle composite nodes
                    parseComposite(value, newPath, extractedData);
                } else {
                    // Recurse into other object nodes (like Loop-2410)
                    parseNode(value, newPath, extractedData);
                }
            });
        } else if (node.isArray()) {
            for (int i = 0; i < node.size(); i++) {
                JsonNode arrayElement = node.get(i);
                String newPath = currentPath + "[" + i + "]";
                parseNode(arrayElement, newPath, extractedData);
            }
        } else if (node.isValueNode()) {
            if (currentPath.contains("segment-") || currentPath.contains("Composite-")) {
                extractedData.put(currentPath, node.asText());
            }
        }
    }
    
    private static void parseSegment(JsonNode segmentNode, String segmentPath, Map<String, String> extractedData) {
        if (segmentNode.isObject()) {
            segmentNode.fields().forEachRemaining(element -> {
                String elementKey = element.getKey();
                JsonNode elementValue = element.getValue();
                String newPath = segmentPath + ":" + elementKey;
                
                if (elementKey.startsWith("Composite-")) {
                    // Handle nested composite within segment
                    parseComposite(elementValue, newPath, extractedData);
                } else if (elementValue.isObject()) {
                    // Recurse into any other nested objects
                    parseNode(elementValue, newPath, extractedData);
                } else if (elementValue.isValueNode()) {
                    // Direct element value
                    extractedData.put(newPath, elementValue.asText());
                }
            });
        }
    }
    
    private static void parseComposite(JsonNode compositeNode, String compositePath, Map<String, String> extractedData) {
        if (compositeNode.isObject()) {
            compositeNode.fields().forEachRemaining(element -> {
                String elementPath = compositePath + ":" + element.getKey();
                JsonNode elementValue = element.getValue();
                
                if (elementValue.isValueNode()) {
                    extractedData.put(elementPath, elementValue.asText());
                } else if (elementValue.isObject()) {
                    // Recurse in case of deeper nesting
                    parseNode(elementValue, elementPath, extractedData);
                }
            });
        }
    }
}
