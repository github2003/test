public static List<Map<String, String>> extractLoop(List<Map<String, String>> parsedList, String parentLoop, String targetLoop) {
    List<Map<String, String>> result = new ArrayList<>();

    for (Map<String, String> flatMap : parsedList) {
        // Group by parent loop index
        Map<String, Map<String, String>> groupedByParent = new LinkedHashMap<>();

        for (Map.Entry<String, String> entry : flatMap.entrySet()) {
            String path = entry.getKey();
            String value = entry.getValue();

            if (!path.contains(parentLoop + "[")) continue;

            String parentKey = extractLoopIndexKey(path, parentLoop);
            if (parentKey == null) continue;

            // Filter target loop or all under parent
            if (targetLoop == null || path.contains(targetLoop)) {
                groupedByParent
                    .computeIfAbsent(parentKey, k -> new LinkedHashMap<>())
                    .put(path, value);
            }
        }

        result.addAll(groupedByParent.values());
    }

    return result;
}

private static String extractLoopIndexKey(String path, String loopName) {
    int loopStart = path.indexOf(loopName + "[");
    if (loopStart == -1) return null;
    int indexStart = loopStart + loopName.length() + 1;
    int indexEnd = path.indexOf("]", indexStart);
    if (indexEnd == -1) return null;
    return loopName + "[" + path.substring(indexStart, indexEnd) + "]";
}

// Get all 2400 segments (2400E, 2400B, etc.)
extractLoop(parsedList, "Loop-2400", null);

// Get only 2400B under each 2400
extractLoop(parsedList, "Loop-2400", "Loop-2400B");

// Get only 2400E under each 2400
extractLoop(parsedList, "Loop-2400", "Loop-2400E");

