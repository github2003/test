import java.util.*;
import java.util.stream.Collectors;

public class GenericLoopGrouper {

    /**
     * Groups child loops (like Loop-2420B[0], Loop-2420B[1]) under each parent loop (like Loop-2400[0]).
     * 
     * @param parsedData List of parsed maps from recursive parser
     * @param parentLoopName e.g. "Loop-2400"
     * @param childLoopName  e.g. "Loop-2420B"
     * @return Map where key = parent loop name with index (e.g. Loop-2400[0]), 
     *         and value = list of maps containing all child loop data under that parent
     */
    public static Map<String, List<Map<String, String>>> groupChildLoopsByParent(
            List<Map<String, String>> parsedData,
            String parentLoopName,
            String childLoopName) {

        Map<String, List<Map<String, String>>> result = new LinkedHashMap<>();

        for (Map<String, String> segment : parsedData) {
            Optional<String> parentKeyOpt = segment.keySet().stream()
                    .filter(k -> k.contains(parentLoopName + "["))
                    .findFirst();

            Optional<String> childKeyOpt = segment.keySet().stream()
                    .filter(k -> k.contains(childLoopName + "["))
                    .findFirst();

            if (parentKeyOpt.isPresent()) {
                String parentKey = parentKeyOpt.get();
                String parentIndex = parentKey.substring(parentKey.indexOf("["),
                        parentKey.indexOf("]") + 1); // Extract "[0]" part

                String groupKey = parentLoopName + parentIndex;

                // Only include if this segment belongs to the desired child loop
                if (childKeyOpt.isPresent()) {
                    result.computeIfAbsent(groupKey, k -> new ArrayList<>()).add(segment);
                }
            }
        }

        return result;
    }

    // Example main method to show how it works
    public static void main(String[] args) {
        List<Map<String, String>> parsedData = new ArrayList<>();

        // Simulated parsed data
        parsedData.add(Map.of("Loop-2400[0]:SEG", "A1", "Loop-2420B[0]:VAL", "X1"));
        parsedData.add(Map.of("Loop-2400[0]:SEG", "A1", "Loop-2420B[1]:VAL", "X2"));
        parsedData.add(Map.of("Loop-2400[1]:SEG", "A2", "Loop-2420B[0]:VAL", "Y1"));
        parsedData.add(Map.of("Loop-2400[1]:SEG", "A2", "Loop-2420B[1]:VAL", "Y2"));

        Map<String, List<Map<String, String>>> grouped = groupChildLoopsByParent(parsedData, "Loop-2400", "Loop-2420B");

        for (Map.Entry<String, List<Map<String, String>>> entry : grouped.entrySet()) {
            System.out.println("Parent Group: " + entry.getKey());
            entry.getValue().forEach(System.out::println);
        }
    }
}


public static List<Map<String, String>> filterSegmentsForLoop(
        List<Map<String, String>> parsedData, String loopName) {

    return parsedData.stream()
            .filter(map -> map.keySet().stream().anyMatch(k -> k.contains(loopName + "[")))
            .collect(Collectors.toList());
}
